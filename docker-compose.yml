services:
  database:
    container_name: 'database'
    image: postgres:17
    environment:
      POSTGRES_USER: dbadmin
      POSTGRES_PASSWORD: dbadmin
      POSTGRES_DB: collaborize
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - web

  tldraw:
    container_name: 'tldraw'
    build:
      context: .
      dockerfile: ./apps/tldraw-sync/Dockerfile
    ports:
      - '5858:5858'
    networks:
      - web

  app:
    container_name: 'app'
    build:
      context: .
      dockerfile: ./apps/frontend/Dockerfile
    environment:
      DATABASE_URL: postgres://dbadmin:dbadmin@database:5432/collaborize
      AUTH_TRUST_HOST: true
      FRONTEND_URL: https://collaborize.localhost
      API_URL: http://app:3000/api
      AUTH_SECRET: ITU6sRToXsdrDTPW1Uiip/KkDBv1QoyZzUGmbgSSwV4=
      AUTH_REDIRECT_PROXY_URL: https://collaborize.localhost/api/auth
      MINIO_BUCKET: collaborize
      MINIO_HOST: minio
      MINIO_PUBLIC_HOST: collaborize.localhost
      MINIO_PORT: 9000
      MINIO_ACCESS_KEY: collaborize-access
      MINIO_SECRET_KEY: collaborize-secret
      MAX_FILE_SIZE: 10485760
      ALLOWED_FILE_TYPES: image/jpeg,image/jpg,image/png,application/pdf
    ports:
      - '3000:3000'
    networks:
      - web
    develop:
      watch:
        - action: sync
          path: ./apps/frontend
          target: ./app/apps/frontend

  reverse-proxy:
    container_name: 'reverse-proxy'
    image: caddy:latest
    environment:
      APP_URL: host.docker.internal:3000
    volumes:
      - ./Caddyfile:/etc/caddy/Caddyfile
    ports:
      - '80:80'
      - '443:443'
    networks:
      - web

  minio:
    image: minio/minio:latest
    ports:
      - "9000:9000"
      - "9090:9090"
    environment:
      MINIO_ROOT_USER: minio-admin          # Admin console username
      MINIO_ROOT_PASSWORD: password         # Admin console password
    volumes:
      - minio_data:/data
    entrypoint: >
      /bin/sh -c '
        isAlive() { curl -sf http://minio:9000/minio/health/live; }       # check if Minio is alive
        minio $0 "$@" --quiet & echo $! > /tmp/minio.pid                  # start Minio in the background
        until isAlive; do sleep 1; done                                   # wait until Minio is alive
        echo "MinIO is ready. Proceeding with setup..."
        mc alias set myminio http://minio:9000 minio-admin password       # setup Minio client
        mc mb myminio/collaborize/ --ignore-existing                      # create test bucket
        mc anonymous set public myminio/collaborize                       # make the test bucket public
        mc admin user add myminio collaborize-access collaborize-secret   # create a new user
        mc admin policy attach myminio readwrite --user collaborize-access   # set the policy for the new user
        kill -s INT $(cat /tmp/minio.pid) && rm /tmp/minio.pid            # stop Minio
        while isAlive; do sleep 0.1; done                                 # wait until Minio is stopped
        exec minio $0 "$@"                                                # start Minio in the foreground
      '
    command: server /data --console-address ":9090"
    healthcheck:
      test: ["CMD", "mc", "ready", "local"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - web

volumes:
  postgres_data:
  minio_data:

networks:
  web: